name: Go Binary Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

permissions:
  contents: write


jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: "^1.20"

    # - name: Verify module version
    #   run: |
    #     MODULE_VERSION=$(go list -m -versions -json | jq -r '.Versions | .[-1]')
    #     # TAG_VERSION=${{ github.ref_name }}
    #     # if [ "$MODULE_VERSION" != "$TAG_VERSION" ]; then
    #     #   echo "Error: Module version ($MODULE_VERSION) does not match tag version ($TAG_VERSION)"
    #     #   exit 1
    #     # fi

    - name: Create output directory
      run: mkdir -p bin

    - name: Build binaries for multiple platforms
      run: |
        platforms=(
          "linux/amd64"
          "linux/arm64"
          "darwin/amd64"
          "darwin/arm64"
          "windows/amd64"
          "windows/arm64"
        )

        for platform in "${platforms[@]}"; do
          IFS="/" read -r -a parts <<< "$platform"
          GOOS="${parts[0]}"
          GOARCH="${parts[1]}"

          output_name="bin/main-$GOOS-$GOARCH"
          if [ "$GOOS" == "windows" ]; then
            output_name+=".exe"
          fi

          echo "Building for $GOOS/$GOARCH..."
          GOOS=$GOOS GOARCH=$GOARCH go build -ldflags "-X main.version=${{ github.ref_name }}" -o "$output_name" main.go metadata.go logger.go
        done

    - name: Upload binaries
      uses: actions/upload-artifact@v3
      with:
        name: binaries
        path: bin/

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        draft: false
        prerelease: false

    - name: Upload Release Assets
      run: |
        for file in bin/*; do
          echo "Uploading $file..."
          gh release upload "${{ github.ref_name }}" "$file" --clobber
        done
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
